#!/bin/bash

# function to encode to base64
to_base64() {
    # find out why that number in: https://sunaku.github.io/tmux-yank-osc52.html
    echo -n "$(echo -n "$1" | head -c 74994 | base64 -)"
}

# function to wrap osc52
wrap_osc52() {
    echo -n "\e]52;c;$1\x07"
}

# function to wrap tmux
wrap_tmux() {
    echo -n "\ePtmux;\e$1\e\\"
}

# var
content=''

# handle the different input
# https://stackoverflow.com/questions/18761209/how-to-make-a-bash-function-which-can-read-from-standard-input?lq=1
if [[ $# -gt 0 ]]; then
    content="$(echo "$*")"

else
    # When it is piped or redirected
    # Reference: https://serverfault.com/questions/156470/testing-for-a-script-that-is-waiting-on-stdin
    IFS='' read -t 1 -d '' -r content
    # content="$(</dev/stdin)" # will throw device not found error
    # content="$(cat /dev/stdin)" # will throw device not found error
    # content="$(cat)"
    # content="$(echo -ne "\n$content\n")"
    # content="$(tee)" # missing newline at head and tail

fi

# # Debug only
# echo "$(date)" >> /tmp/toclip.log
# if [[ -n $TOCLIP_HOST_TMUX ]]; then
#     echo "$(date)" >> /tmp/toclipt.log
# fi

# handle the no input error
if [[ -z $content ]]; then
    echo 'no value to copy to clipboard' >&2
    exit 1
fi

# handle either local or remote
if [[ -z $SSH_TTY ]]; then

    # local connection
    if command -v clip.exe &>/dev/null; then
        echo -n "$content" | clip.exe
        exit 0
    fi

    if command -v xclip &>/dev/null; then
        echo -n "$content" | xclip -selection clipboard
        exit 0
    fi

    echo "clip.exe is not found" >&2
    echo "xclip is not installed either" >&2
    exit 1

else
    # remote, have to wrap osc52
    content="$(to_base64 "$content")"
    content="$(wrap_osc52 "$content")"

    # for remote, there are couple conditions to think about
    # TODO make sure all following cases were covered

    # When local: plain ; remote: plain ; in nvim     ; Osc52 to sshtty
    # When local: plain ; remote: tmux  ; in nvim     ; Osc52 to sshtty
    # When local: tmux  ; remote: tmux  ; in nvim     ; Osc52+tmuxwrpa to sshtty
    # When local: tmux  ; remote: plain ; in nvim     ; Osc52+tmuxwrap to sshtty
    # When local: plain ; remote: plain ; in terminal ; Osc52 to sshtty
    # When local: plain ; remote: tmux  ; in terminal ; Osc52 to sshtty
    # When local: tmux  ; remote: tmux  ; in terminal ; Osc52+tmuxwrap to sshtty
    # When local: tmux  ; remote: plain ; in terminal ; Osc52+tmuxwrap to sshtty

    # if we have detected to have remote tmux session
    if [[ -n $TOCLIP_HOST_TMUX ]]; then
        content="$(wrap_tmux "$content")"
    fi

    # when we have ssh tty available, just use it
    echo -ne "$content" > $SSH_TTY

fi
